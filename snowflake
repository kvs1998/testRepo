-- Corrected Initial Population using MERGE INTO
-- Run this ONCE or periodically to synchronize T_DYNAMIC_TABLE_TRACKING.
-- Replace YOUR_DB and YOUR_SCHEMA.

MERGE INTO YOUR_DB.YOUR_SCHEMA.T_DYNAMIC_TABLE_TRACKING AS target_tracking
USING (
    SELECT
        DATABASE_NAME,
        SCHEMA_NAME,
        NAME AS TABLE_NAME,
        DATABASE_NAME || '.' || SCHEMA_NAME || '.' || NAME AS QUALIFIED_NAME -- Generate qualified name here
    FROM INFORMATION_SCHEMA.DYNAMIC_TABLES(RESULT_LIMIT => 10000) -- Get all dynamic tables
) AS source_dt
ON target_tracking.QUALIFIED_NAME = source_dt.QUALIFIED_NAME -- Match on the unique qualified name

WHEN MATCHED THEN -- If a record for this dynamic table already exists
    UPDATE SET
        target_tracking.UPDATED_AT = CURRENT_TIMESTAMP() -- Just update the timestamp if it's already tracked

WHEN NOT MATCHED THEN -- If a record for this dynamic table does NOT exist
    INSERT (
        DATABASE_NAME, 
        SCHEMA_NAME, 
        TABLE_NAME, 
        QUALIFIED_NAME,
        -- Default values will apply for TRACK_REFRESH_HISTORY, IS_ACTIVE, COLLECT_...
        -- LAST_..._COLLECTION_TIMESTAMP, LAST_..._COLLECTION_STATUS, LAST_..._COLLECTION_MESSAGE
        -- CREATED_AT (default)
        UPDATED_AT -- Set explicitly if needed, otherwise default to CURRENT_TIMESTAMP()
    )
    VALUES (
        source_dt.DATABASE_NAME, 
        source_dt.SCHEMA_NAME, 
        source_dt.TABLE_NAME, 
        source_dt.QUALIFIED_NAME,
        CURRENT_TIMESTAMP() -- Set UPDATED_AT for new inserts
    );
