# tabs/dt_health_tab.py
import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np

# Helper function to convert seconds to a more readable format
def format_seconds_to_readable(seconds_series, format_type):
    if format_type == "seconds":
        return seconds_series.round(1).astype(str) + "s"
    elif format_type == "minutes":
        return (seconds_series / 60).round(1).astype(str) + "m"
    elif format_type == "hours":
        return (seconds_series / 3600).round(1).astype(str) + "h"
    elif format_type == "days":
        return (seconds_series / 86400).round(1).astype(str) + "d"
    elif format_type == "mixed":
        # Mixed format: days, hours, minutes, seconds
        def mix_format(s):
            if pd.isna(s): return "N/A"
            s = float(s) # Ensure s is float for calculations
            days = int(s // 86400)
            hours = int((s % 86400) // 3600)
            minutes = int((s % 3600) // 60)
            seconds = s % 60
            
            parts = []
            if days > 0: parts.append(f"{days}d")
            if hours > 0: parts.append(f"{hours}h")
            if minutes > 0: parts.append(f"{minutes}m")
            if seconds > 0 and (not parts or seconds >= 1): # Only show seconds if other units are 0 or if >= 1s
                parts.append(f"{seconds:.1f}s")
            
            return " ".join(parts) if parts else "0s"
        return seconds_series.apply(mix_format)
    return seconds_series # Fallback


def render_dt_health_tab(metadata_df: pd.DataFrame):
    st.header("Dynamic Table Health & Current Status")
    st.write("Analyze the current operational state and aggregate lag metrics of your dynamic tables.")

    if metadata_df.empty:
        st.info("No metadata available for DT HEALTH tab. Check data source or collection.", icon="ℹ️")
        return

    # --- Filters for DT Health Tab ---
    st.markdown("---")
    st.subheader("Apply Filters for DT Health")

    filter_cols_dt_health_row1 = st.columns([1, 1, 1, 1])
    filter_cols_dt_health_row2 = st.columns([1, 1]) # For time format and other filters

    with filter_cols_dt_health_row1[0]:
        all_databases_dt_health = ['All'] + sorted(metadata_df['DATABASE_NAME'].unique().tolist())
        selected_database_dt_health = st.selectbox(
            "Database:", options=all_databases_dt_health, key="db_filter_dt_health"
        )
    with filter_cols_dt_health_row1[1]:
        temp_df_for_schema_options = metadata_df.copy()
        if selected_database_dt_health != 'All':
            temp_df_for_schema_options = temp_df_for_schema_options[temp_df_for_schema_options['DATABASE_NAME'] == selected_database_dt_health]

        if not temp_df_for_schema_options.empty:
            schemas_in_db_dt_health = ['All'] + sorted(temp_df_for_schema_options['SCHEMA_NAME'].unique().tolist())
        else:
            schemas_in_db_dt_health = ['All']
            st.info("No schemas found for selected Database.", icon="ℹ️")

        selected_schema_dt_health = st.selectbox(
            "Schema:", options=schemas_in_db_dt_health, key="schema_filter_dt_health"
        )
    
    df_for_table_options = metadata_df.copy()
    if selected_database_dt_health != 'All':
        df_for_table_options = df_for_table_options[df_for_table_options['DATABASE_NAME'] == selected_database_dt_health]
    if selected_schema_dt_health != 'All':
        df_for_table_options = df_for_table_options[df_for_table_options['SCHEMA_NAME'] == selected_schema_dt_health]


    with filter_cols_dt_health_row1[2]:
        if not df_for_table_options.empty:
            all_tables_dt_health_options = ['All'] + sorted(df_for_table_options['TABLE_NAME'].unique().tolist())
            default_tables_dt_health_selected = ['All']
        else:
            all_tables_dt_health_options = ['All']
            default_tables_dt_health_selected = ['All']
            st.info("No tables found for selected DB/Schema.", icon="ℹ️")
        selected_table_dt_health = st.multiselect(
            "Table(s):", options=all_tables_dt_health_options, default=default_tables_dt_health_selected, key="table_filter_dt_health"
        )
    with filter_cols_dt_health_row1[3]:
        all_scheduling_states = ['All'] + sorted(metadata_df['SCHEDULING_STATE_STATUS'].unique().tolist())
        selected_scheduling_state = st.multiselect(
            "Scheduling State(s):", options=all_scheduling_states, default=['All'], key="scheduling_state_filter_dt_health"
        )
    
    with filter_cols_dt_health_row2[0]: # Moved time format option here
        time_format_option = st.radio(
            "Display Lag Times In:", 
            options=["mixed", "seconds", "minutes", "hours", "days"], 
            index=0, # Default to mixed
            horizontal=True,
            key="time_format_dt_health"
        )
    
    # You can add other filter controls here in filter_cols_dt_health_row2[1] if needed
    # For instance, a min/max lag filter etc.

    st.markdown("---")


    # --- Apply Filters to Main DataFrame ---
    filtered_metadata_df = metadata_df.copy()

    if selected_database_dt_health != 'All':
        filtered_metadata_df = filtered_metadata_df[filtered_metadata_df['DATABASE_NAME'] == selected_database_dt_health]
    if selected_schema_dt_health != 'All':
        filtered_metadata_df = filtered_metadata_df[filtered_metadata_df['SCHEMA_NAME'] == selected_schema_dt_health]
    if selected_table_dt_health and 'All' not in selected_table_dt_health:
        filtered_metadata_df = filtered_metadata_df[filtered_metadata_df['TABLE_NAME'].isin(selected_table_dt_health)]
    elif not selected_table_dt_health:
        st.warning("No table(s) selected. Display will be empty.", icon="⚠️")
        filtered_metadata_df = pd.DataFrame()

    if selected_scheduling_state and 'All' not in selected_scheduling_state:
        filtered_metadata_df = filtered_metadata_df[filtered_metadata_df['SCHEDULING_STATE_STATUS'].isin(selected_scheduling_state)]
    elif not selected_scheduling_state:
        st.warning("No scheduling state(s) selected. Display will be empty.", icon="⚠️")
        filtered_metadata_df = pd.DataFrame()

    if filtered_metadata_df.empty:
        st.info("No data available based on current filter selections. Please adjust your filters.", icon="ℹ️")
        return


    # --- KPIs and Primary Charts Section ---
    kpi_chart_cols = st.columns([0.4, 0.6]) # Left for KPIs, Right for Scheduling/Lag Type Charts

    with kpi_chart_cols[0]: # Left Column: KPIs
        st.subheader("Current Dynamic Table Health KPIs")
        
        total_dt_monitored = filtered_metadata_df['QUALIFIED_NAME'].nunique()
        running_dt_count = filtered_metadata_df[filtered_metadata_df['SCHEDULING_STATE_STATUS'] == 'RUNNING']['QUALIFIED_NAME'].nunique()
        suspended_dt_count = filtered_metadata_df[filtered_metadata_df['SCHEDULING_STATE_STATUS'] == 'SUSPENDED']['QUALIFIED_NAME'].nunique()
        executing_refresh_dt_count = filtered_metadata_df[filtered_metadata_df['EXECUTING_REFRESH_QUERY_ID'].notna()]['QUALIFIED_NAME'].nunique()
        
        avg_mean_lag = filtered_metadata_df['MEAN_LAG_SEC'].mean()
        max_lag = filtered_metadata_df['MAXIMUM_LAG_SEC'].max()

        # Format KPI values to display using the selected time format
        avg_mean_lag_fmt = format_seconds_to_readable(pd.Series([avg_mean_lag]), time_format_option).iloc[0]
        max_lag_fmt = format_seconds_to_readable(pd.Series([max_lag]), time_format_option).iloc[0]


        kpi_cols_dt_health_row1 = st.columns(2)
        with kpi_cols_dt_health_row1[0]:
            st.markdown(f"<p style='font-size:14px; margin-bottom:0;'>Total DTs Monitored</p>", unsafe_allow_html=True)
            st.markdown(f"<h3 style='margin-top:0;'>{total_dt_monitored}</h3>", unsafe_allow_html=True)
            st.markdown(f"<p style='font-size:14px; color:blue; margin-bottom:0;'>Refreshing Now</p>", unsafe_allow_html=True)
            st.markdown(f"<h3 style='margin-top:0;'>{executing_refresh_dt_count} tables</h3>", unsafe_allow_html=True)
        with kpi_cols_dt_health_row1[1]:
            st.markdown(f"<p style='font-size:14px; color:green; margin-bottom:0;'>Running DTs</p>", unsafe_allow_html=True)
            st.markdown(f"<h3 style='margin-top:0;'>{running_dt_count}</h3>", unsafe_allow_html=True)
            st.markdown(f"<p style='font-size:14px; margin-bottom:0;'>Avg Mean Lag</p>", unsafe_allow_html=True)
            st.markdown(f"<h3 style='margin-top:0;'>{avg_mean_lag_fmt}</h3>", unsafe_allow_html=True) # Use formatted value

        kpi_cols_dt_health_row2 = st.columns(2)
        with kpi_cols_dt_health_row2[0]:
            st.markdown(f"<p style='font-size:14px; color:red; margin-bottom:0;'>Suspended DTs</p>", unsafe_allow_html=True)
            st.markdown(f"<h3 style='margin-top:0;'>{suspended_dt_count}</h3>", unsafe_allow_html=True)
        with kpi_cols_dt_health_row2[1]:
            st.markdown(f"<p style='font-size:14px; margin-bottom:0;'>Max Lag</p>", unsafe_allow_html=True)
            st.markdown(f"<h3 style='margin-top:0;'>{max_lag_fmt}</h3>", unsafe_allow_html=True) # Use formatted value
            
    with kpi_chart_cols[1]: # Right Column: Scheduling State and Target Lag Type Distribution Charts
        st.subheader("Scheduling & Lag Type Distribution")

        chart_rows = st.columns(2)
        with chart_rows[0]:
            scheduling_state_counts = filtered_metadata_df['SCHEDULING_STATE_STATUS'].value_counts().reset_index()
            scheduling_state_counts.columns = ['Status', 'Count']
            if not scheduling_state_counts.empty:
                fig_scheduling_state = px.pie(scheduling_state_counts, 
                                          values='Count', 
                                          names='Status', 
                                          title='Scheduling State',
                                          hole=0.3,
                                          color_discrete_map={'RUNNING': 'green', 'SUSPENDED': 'red', 'UNKNOWN': 'grey'}) # Added UNKNOWN
                fig_scheduling_state.update_traces(textposition='inside', textinfo='percent')
                st.plotly_chart(fig_scheduling_state, use_container_width=True)
            else:
                st.info("No scheduling state data.", icon="ℹ️")


        with chart_rows[1]:
            target_lag_type_counts = filtered_metadata_df['TARGET_LAG_TYPE'].value_counts().reset_index()
            target_lag_type_counts.columns = ['Lag Type', 'Count']
            if not target_lag_type_counts.empty:
                fig_lag_type = px.pie(target_lag_type_counts,
                                  values='Count',
                                  names='Lag Type',
                                  title='Target Lag Type',
                                  hole=0.3,
                                  color_discrete_map={'USER_DEFINED': 'blue', 'DOWNSTREAM': 'purple', 'UNKNOWN_TYPE': 'grey'}) # Added UNKNOWN_TYPE
                fig_lag_type.update_traces(textposition='inside', textinfo='percent')
                st.plotly_chart(fig_lag_type, use_container_width=True)
            else:
                st.info("No target lag type data.", icon="ℹ️")

    st.divider()

    # --- Charts for Detailed Tracking ---
    st.subheader("Performance & Compliance Insights")
    
    # New row for the remaining charts (Lag Hist, Last Refresh Status, Target vs Actual Lag)
    chart_detail_row1_cols = st.columns(2)


    with chart_detail_row1_cols[0]: # Lag Time Distribution (Mean Lag) Histogram
        st.markdown("<p style='font-size:16px;'><b>Lag Time Distribution (Mean Lag)</b></p>", unsafe_allow_html=True)
        st.write("Distribution of dynamic tables by their mean lag time.")

        hist_data = filtered_metadata_df['MEAN_LAG_SEC'].dropna()
        if not hist_data.empty:
            fig_lag_hist = px.histogram(filtered_metadata_df, # Pass filtered_metadata_df directly to use it for customdata
                                        x="MEAN_LAG_SEC", 
                                        nbins=20, 
                                        title='Mean Lag Time Distribution',
                                        labels={'MEAN_LAG_SEC': 'Mean Lag (seconds)'}) # Axis label remains seconds for numerical accuracy
            fig_lag_hist.update_layout(bargap=0.1)
            
            # Log scale checkbox for histogram
            use_log_scale_hist = st.checkbox("Log Scale X-axis (Mean Lag Hist)", key="log_scale_hist_dt_health")
            if use_log_scale_hist:
                fig_lag_hist.update_xaxes(type='log')
                st.info("Logarithmic scale applied to X-axis.", icon="ℹ️")

            st.plotly_chart(fig_lag_hist, use_container_width=True)
        else:
            st.info("No mean lag data to display for selected filters.", icon="ℹ️")

    with chart_detail_row1_cols[1]: # Tables by Last Completed Refresh Status (Bar Chart)
        st.markdown("<p style='font-size:16px;'><b>Tables by Last Completed Refresh Status</b></p>", unsafe_allow_html=True)
        st.write("Distribution of dynamic tables based on their most recent refresh outcome.")

        last_refresh_state_counts = filtered_metadata_df['LAST_COMPLETED_REFRESH_STATE'].value_counts().reset_index()
        last_refresh_state_counts.columns = ['Status', 'Count']

        if not last_refresh_state_counts.empty:
            fig_last_refresh_state = px.bar(
                last_refresh_state_counts,
                x='Count',
                y='Status',
                orientation='h',
                title='Last Completed Refresh Status',
                color='Status',
                color_discrete_map={'SUCCEEDED': 'green', 'FAILED': 'red', 'UPSTREAM_FAILED': 'darkred', 'CANCELLED': 'orange'}
            )
            fig_last_refresh_state.update_yaxes(categoryorder="total ascending")
            st.plotly_chart(fig_last_refresh_state, use_container_width=True)
        else:
            st.info("No last refresh status data to display for selected filters.", icon="ℹ️")

    st.divider()

    # --- Alternative to Scatter: Bar Chart showing Target Lag vs. Actual Lag (for specific tables) ---
    st.subheader("Target Lag vs. Actual Lag by Table")
    st.write("Compare target lag against mean and maximum actual lag for individual dynamic tables. Filter tables above using the 'Table(s)' filter.")

    # Sort tables for display (e.g., by highest mean lag first)
    lag_comparison_df = filtered_metadata_df.dropna(subset=['TARGET_LAG_SEC', 'MEAN_LAG_SEC', 'MAXIMUM_LAG_SEC']).copy()
    
    if not lag_comparison_df.empty:
        # Sort by Mean Lag for display
        lag_comparison_df = lag_comparison_df.sort_values('MEAN_LAG_SEC', ascending=False)

        num_tables_lag_comparison = st.slider(
            "Show Top N Tables for Lag Comparison:",
            min_value=5, max_value=min(30, len(lag_comparison_df)), value=min(15, len(lag_comparison_df)),
            key="lag_comparison_slider_dt_health"
        )
        display_lag_comparison_df = lag_comparison_df.head(num_tables_lag_comparison)

        # Prepare formatted columns for hover and possibly axis labels if you switch to formatted axis.
        display_lag_comparison_df['MEAN_LAG_FMT'] = format_seconds_to_readable(display_lag_comparison_df['MEAN_LAG_SEC'], time_format_option)
        display_lag_comparison_df['MAX_LAG_FMT'] = format_seconds_to_readable(display_lag_comparison_df['MAXIMUM_LAG_SEC'], time_format_option)
        display_lag_comparison_df['TARGET_LAG_FMT'] = format_seconds_to_readable(display_lag_comparison_df['TARGET_LAG_SEC'], time_format_option)

        # Melt the DataFrame to plot Target, Mean, Max Lag as separate bars for each table
        melted_lag_df = display_lag_comparison_df.melt(
            id_vars=['QUALIFIED_NAME', 'DATABASE_NAME', 'SCHEMA_NAME', 'LAST_COMPLETED_REFRESH_STATE'],
            value_vars=['TARGET_LAG_SEC', 'MEAN_LAG_SEC', 'MAXIMUM_LAG_SEC'],
            var_name='Lag_Type',
            value_name='Lag_Value_Seconds'
        )

        # Add a formatted value column for hover/tooltips in the melted data
        melted_lag_df['Formatted_Lag_Value'] = format_seconds_to_readable(melted_lag_df['Lag_Value_Seconds'], time_format_option)


        # Create a grouped bar chart
        fig_lag_comparison = px.bar(
            melted_lag_df,
            x='Lag_Value_Seconds', # Raw seconds for actual plotting
            y='QUALIFIED_NAME',
            color='Lag_Type',
            barmode='group', # Group bars side-by-side for each table
            orientation='h',
            title='Lag Comparison by Table (Target, Mean, Max)',
            labels={'Lag_Value_Seconds': 'Lag (seconds)', 'QUALIFIED_NAME': 'Dynamic Table', 'Lag_Type': 'Lag Metric'},
            color_discrete_map={ # Custom colors for clarity
                'TARGET_LAG_SEC': 'lightblue',
                'MEAN_LAG_SEC': 'darkblue',
                'MAXIMUM_LAG_SEC': 'orange'
            }
        )
        
        fig_lag_comparison.update_yaxes(categoryorder='trace reversed') # Keep sorted order from Pandas
        
        # Add custom hover template to show formatted lag values
        fig_lag_comparison.update_traces(
            hovertemplate=(
                '<b>%{y}</b><br>'
                'Metric: %{full_data.name}<br>' # This refers to Lag_Type
                'Value: %{customdata[0]}<br>' # Formatted value
                'Last Refresh Status: %{customdata[1]}<br>' # Last refresh status
                'Database: %{customdata[2]}<br>'
                'Schema: %{customdata[3]}<br>'
                '<extra></extra>' # Hides trace name
            ),
            # customdata should contain the data for the hover text, in the order specified in hovertemplate
            customdata=np.stack((
                melted_lag_df['Formatted_Lag_Value'],
                melted_lag_df['LAST_COMPLETED_REFRESH_STATE'],
                melted_lag_df['DATABASE_NAME'],
                melted_lag_df['SCHEMA_NAME']
            ), axis=-1)
        )

        # Log scale option for this chart
        use_log_scale_lag_comparison = st.checkbox("Log Scale X-axis (Lag Comparison)", key="log_scale_lag_comparison_dt_health")
        if use_log_scale_lag_comparison:
            fig_lag_comparison.update_xaxes(type='log')
            st.info("Logarithmic scale applied to X-axis.", icon="ℹ️")

        st.plotly_chart(fig_lag_comparison, use_container_width=True)
    else:
        st.info("No lag comparison data to display for selected filters.", icon="ℹ️")


    st.divider()


    # Removed: Detailed Dynamic Table Current Status Table (as per request)
    # This section is now deleted

    # --- Other sections (dt_state_tab, refresh_stats_tab, etc.) would follow ---
