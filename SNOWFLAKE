CREATE OR REPLACE PROCEDURE ..INSERT_DT_REFRESH_HISTORY(
    DB_NAME VARCHAR,
    SCHEMA_NAME VARCHAR,
    TABLE_NAME VARCHAR
)
RETURNS VARCHAR
LANGUAGE PYTHON
RUNTIME_VERSION = '3.9'
PACKAGES = ('snowflake-snowpark-python')
HANDLER = 'insert_refresh_history_handler'
AS $$
import snowflake.snowpark as snowpark
from snowflake.snowpark.functions import col, max as max_
from snowflake.snowpark.types import TimestampType

def insert_refresh_history_handler(session: snowpark.Session, db_name: str, schema_name: str, table_name: str):
    history_table_identifier = f'"{db_name}"."{schema_name}"."T_DT_REFRESH_HISTORY"'
    dynamic_table_identifier = f'"{db_name}"."{schema_name}"."{table_name}"'

    try:
        # Step 1: Get the latest REFRESH_END_TIME from history table
        latest_refresh_time_df = session.table(history_table_identifier).filter(
            (col("DATABASE_NAME") == db_name.upper()) &
            (col("SCHEMA_NAME") == schema_name.upper()) &
            (col("TABLE_NAME") == table_name.upper())
        ).agg(max_("REFRESH_END_TIME").alias("latest_refresh_time")).collect()

        latest_refresh_time = latest_refresh_time_df[0]["LATEST_REFRESH_TIME"] if latest_refresh_time_df else None
    except Exception as e:
        latest_refresh_time = None

    # Step 2: Query the dynamic table refresh history
    refresh_df = session.table("INFORMATION_SCHEMA.DYNAMIC_TABLE_REFRESH_HISTORY") \
        .filter((col("NAME") == table_name) & (col("DATABASE_NAME") == db_name) & (col("SCHEMA_NAME") == schema_name))
    
    if latest_refresh_time:
        refresh_df = refresh_df.filter(col("REFRESH_END_TIME") > latest_refresh_time)

    # Step 3: Convert TIMESTAMP_LTZ â†’ TIMESTAMP_NTZ
    for col_name in ["DATA_TIMESTAMP", "REFRESH_START_TIME", "REFRESH_END_TIME", "COMPLETION_TARGET"]:
        refresh_df = refresh_df.with_column(col_name, col(col_name).cast(TimestampType()))

    # Step 4: Select only required columns for insert
    insert_df = refresh_df.select(
        col("DATABASE_NAME"), col("SCHEMA_NAME"), col("NAME").alias("TABLE_NAME"),
        "STATE", "STATE_CODE", "STATE_MESSAGE", "QUERY_ID",
        "DATA_TIMESTAMP", "REFRESH_START_TIME", "REFRESH_END_TIME", "COMPLETION_TARGET",
        "STATISTICS", "REFRESH_ACTION", "REFRESH_TRIGGER", "TARGET_LAG_SEC"
    )

    # Step 5: Append to the history table
    insert_df.write.mode("append").save_as_table(history_table_identifier)

    return f"Inserted {insert_df.count()} rows into {history_table_identifier}"
$$;
