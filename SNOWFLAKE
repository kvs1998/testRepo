CREATE OR REPLACE FUNCTION INSERT_DT_REFRESH_HISTORY (
    DB_NAME VARCHAR,
    SCHEMA_NAME VARCHAR,
    TABLE_NAME VARCHAR
)
RETURNS VARCHAR 
LANGUAGE PYTHON
RUNTIME_VERSION = '3.8' 
PACKAGES = ('snowflake-snowpark-python') 
HANDLER = 'insert_refresh_history_handler' 
AS $$
import snowflake.snowpark as snowpark
from snowflake.snowpark.functions import max as max_, col
from snowflake.snowpark.types import StructType, StructField, StringType, TimestampType, VariantType, IntegerType

def insert_refresh_history_handler(session: snowpark.Session, db_name: str, schema_name: str, table_name: str):
    """
    Snowflake Python UDF to insert dynamic table refresh history.
    """
    history_table_identifier = f'"{db_name}"."{schema_name}"."T_DT_REFRESH_HISTORY"'
    dynamic_table_identifier = f'"{db_name}"."{schema_name}"."{table_name}"'

    # Step 0: Get the latest REFRESH_END_TIME from the history table using DataFrame
    try:
        latest_refresh_time_df = session.table(history_table_identifier).filter(
            (col("DATABASE_NAME") == db_name.upper()) &
            (col("SCHEMA_NAME") == schema_name.upper()) &
            (col("TABLE_NAME") == table_name.upper())
        ).agg(max_("REFRESH_END_TIME")).collect()

        latest_refresh_time = latest_refresh_time_df[0][0] if latest_refresh_time_df else None
    except Exception as e:
        # Handle the case where the history table might not exist yet
        # In a UDF, you might return an error message or a specific value
        print(f"Warning: Could not query history table. Assuming no history exists. Error: {e}")
        latest_refresh_time = None


    # Step 1: Query dynamic_table_refresh_history using DataFrame
    # Define schema for the dynamic_table_refresh_history view results
    refresh_history_schema = StructType([
        StructField("DATABASE_NAME", StringType()),
        StructField("SCHEMA_NAME", StringType()),
        StructField("TABLE_NAME", StringType()),
        StructField("STATE", StringType()),
        StructField("STATE_CODE", StringType()),
        StructField("STATE_MESSAGE", StringType()),
        StructField("QUERY_ID", StringType()),
        StructField("DATA_TIMESTAMP", TimestampType()),
        StructField("REFRESH_START_TIME", TimestampType()),
        StructField("REFRESH_END_TIME", TimestampType()),
        StructField("COMPLETION_TARGET", StringType()),
        StructField("STATISTICS", VariantType()), # STATISTICS is a VARIANT
        StructField("REFRESH_ACTION", StringType()),
        StructField("REFRESH_TRIGGER", StringType()),
        StructField("TARGET_LAG_SEC", IntegerType())
    ])

    # Query using session.sql and create a DataFrame
    query = f"""
    SELECT
        database_name,
        schema_name,
        name AS table_name,
        state,
        state_code,
        state_message,
        query_id,
        data_timestamp,
        refresh_start_time,
        refresh_end_time,
        completion_target,
        statistics,
        refresh_action,
        refresh_trigger,
        target_lag_sec
    FROM TABLE(
        "{db_name}".information_schema.dynamic_table_refresh_history(
            name => '{dynamic_table_identifier}',
            data_timestamp_start => DATEADD('DAYS', -6, CURRENT_TIMESTAMP()),
            result_limit => 10000
        )
    )
    """
    refresh_history_df = session.sql(query).with_schema(refresh_history_schema)

    # Filter new records
    if latest_refresh_time:
        new_history_df = refresh_history_df.filter(col("REFRESH_END_TIME") > latest_refresh_time)
    else:
        new_history_df = refresh_history_df # No history yet, insert all

    # Step 2: Insert into history table using DataFrame write
    try:
        if new_history_df.count() > 0:
            new_history_df.write.mode("append").save_as_table(history_table_identifier)
            rows_inserted = new_history_df.count()
            print(f"✅ Inserted {rows_inserted} new rows into T_DT_REFRESH_HISTORY")
        else:
            rows_inserted = 0
            print("✅ No new refresh history found to insert.")
    except Exception as e:
        print(f"❌ Error inserting into history table: {e}")
        # In a UDF, you might return an error message or re-raise the exception
        return f"Error: {e}" # Return an error message

    # Return a value indicating success or status
    return f"Refresh history update completed. Inserted {rows_inserted} rows."
$$;
