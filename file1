# --- Remaining charts for states and KPIs ---
    st.header("Distribution of Dynamic Table States")

    if not history_df.empty:
        state_counts = history_df['STATE'].value_counts().reset_index()
        state_counts.columns = ['STATE', 'COUNT']

        state_order = ["FAILED", "UPSTREAM_FAILED", "CANCELLED", "SCHEDULED", "EXECUTING", "SUCCEEDED"]
        state_counts['STATE'] = pd.Categorical(state_counts['STATE'], categories=state_order, ordered=True)
        state_counts = state_counts.sort_values('STATE')

        fig_bar_states = px.bar(state_counts,
                                 x='COUNT',
                                 y='STATE',
                                 orientation='h',
                                 title='Number of Tables per Refresh State',
                                 color='STATE',
                                 color_discrete_map={
                                     "FAILED": "red",
                                     "UPSTREAM_FAILED": "darkred",
                                     "CANCELLED": "orange",
                                     "SCHEDULED": "blue",
                                     "EXECUTING": "purple",
                                     "SUCCEEDED": "green"
                                 })
        fig_bar_states.update_layout(showlegend=False)
        fig_bar_states.update_yaxes(categoryorder="array", categoryarray=state_order[::-1])
        st.plotly_chart(fig_bar_states, use_container_width=True)
    else:
        st.warning("No data found to display table states.")

    st.subheader("Key Refresh Status Summary (for quick glance)")
    if not history_df.empty:
        state_counts = history_df['STATE'].value_counts()
        total_tables = state_counts.sum()

        col_failed, col_succeeded, col_executing = st.columns(3)

        with col_failed:
            failed_count = state_counts.get("FAILED", 0) + state_counts.get("UPSTREAM_FAILED", 0)
            st.metric(label="<span style='color:red;'>Total Failed/Upstream Failed</span>",
                      value=f"{failed_count} tables",
                      delta=f"{failed_count/total_tables:.1%}",
                      delta_color="inverse")

        with col_succeeded:
            succeeded_count = state_counts.get("SUCCEEDED", 0)
            st.metric(label="<span style='color:green;'>Succeeded</span>",
                      value=f"{succeeded_count} tables",
                      delta=f"{succeeded_count/total_tables:.1%}",
                      delta_color="normal")

        with col_executing:
            executing_count = state_counts.get("EXECUTING", 0)
            st.metric(label="<span style='color:purple;'>Executing</span>",
                      value=f"{executing_count} tables")

    else:
        st.info("No data for KPI summary.")
