-- Main Collection Stored Procedure - UPDATED for robust MERGE ON clause with NULLs in QUERY_ID/REFRESH_START_TIME
-- Replace YOUR_DB and YOUR_SCHEMA.

CREATE OR REPLACE PROCEDURE YOUR_DB.YOUR_SCHEMA.SP_COLLECT_DT_REFRESH_HISTORY(
    P_DATABASE_NAME VARCHAR,
    P_SCHEMA_NAME VARCHAR,
    P_TABLE_NAME VARCHAR,
    P_COLLECT_FROM_LAST_DAYS NUMBER DEFAULT 7
)
RETURNS VARCHAR
LANGUAGE SQL
EXECUTE AS CALLER
AS
$$
DECLARE
    lv_func_args VARCHAR := '';
    lv_merge_action_desc VARCHAR;
    lv_start_timestamp TIMESTAMP_LTZ;
    lv_end_timestamp TIMESTAMP_LTZ := CURRENT_TIMESTAMP();
    lv_error_message VARCHAR;
    lv_qualified_name_to_filter VARCHAR;
BEGIN
    IF (P_DATABASE_NAME IS NOT NULL AND TRIM(P_DATABASE_NAME) != '' AND
        P_SCHEMA_NAME IS NOT NULL AND TRIM(P_SCHEMA_NAME) != '' AND
        P_TABLE_NAME IS NOT NULL AND TRIM(P_TABLE_NAME) != '') THEN
        
        lv_qualified_name_to_filter := :P_DATABASE_NAME || '.' || :P_SCHEMA_NAME || '.' || :P_TABLE_NAME;
        lv_func_args := 'NAME => ''' || :lv_qualified_name_to_filter || '''';
    ELSE
        RETURN 'ERROR: All of P_DATABASE_NAME, P_SCHEMA_NAME, AND P_TABLE_NAME must be provided and non-empty for refresh history collection.';
    END IF;

    lv_start_timestamp := DATEADD(day, -:P_COLLECT_FROM_LAST_DAYS, :lv_end_timestamp);

    IF (lv_func_args != '') THEN
        lv_func_args := lv_func_args || ', ';
    END IF;
    lv_func_args := lv_func_args || 'DATA_TIMESTAMP_START => ''' || :lv_start_timestamp || '''::TIMESTAMP_LTZ, ';
    lv_func_args := lv_func_args || 'DATA_TIMESTAMP_END => ''' || :lv_end_timestamp || '''::TIMESTAMP_LTZ, ';
    lv_func_args := lv_func_args || 'RESULT_LIMIT => 100000';

    EXECUTE IMMEDIATE '
        MERGE INTO YOUR_DB.YOUR_SCHEMA.T_DYNAMIC_TABLE_REFRESH_HISTORY_FLAT AS target_table
        USING (
            SELECT * FROM (
                SELECT
                    CURRENT_TIMESTAMP()::TIMESTAMP_NTZ AS COLLECTION_TIMESTAMP_SOURCE,
                    dtrh.DATABASE_NAME,
                    dtrh.SCHEMA_NAME,
                    dtrh.NAME AS TABLE_NAME,
                    dtrh.QUALIFIED_NAME,
                    dtrh.STATE,
                    dtrh.STATE_CODE,
                    dtrh.STATE_MESSAGE,
                    dtrh.QUERY_ID,
                    dtrh.DATA_TIMESTAMP::TIMESTAMP_NTZ AS DATA_TIMESTAMP,
                    dtrh.REFRESH_START_TIME::TIMESTAMP_NTZ AS REFRESH_START_TIME,
                    dtrh.REFRESH_END_TIME::TIMESTAMP_NTZ AS REFRESH_END_TIME,
                    dtrh.COMPLETION_TARGET::TIMESTAMP_NTZ AS COMPLETION_TARGET,
                    dtrh.LAST_COMPLETED_DEPENDENCY:qualified_name::TEXT AS LAST_COMPLETED_DEPENDENCY_QUALIFIED_NAME,
                    dtrh.LAST_COMPLETED_DEPENDENCY:data_timestamp::TIMESTAMP_NTZ AS LAST_COMPLETED_DEPENDENCY_DATA_TIMESTAMP,
                    dtrh.STATISTICS:numInsertedRows::NUMBER AS NUMINSERTEDROWS,
                    dtrh.STATISTICS:numDeletedRows::NUMBER AS NUMDELETEDROWS,
                    dtrh.STATISTICS:numCopiedRows::NUMBER AS NUMCOPIEDROWS,
                    dtrh.STATISTICS:numAddedPartitions::NUMBER AS NUMADDEDPARTITIONS,
                    dtrh.STATISTICS:numRemovedPartitions::NUMBER AS NUMREMOVEDPARTITIONS,
                    dtrh.REFRESH_ACTION,
                    dtrh.REFRESH_TRIGGER,
                    dtrh.TARGET_LAG_SEC,
                    dtrh.GRAPH_HISTORY_VALID_FROM::TIMESTAMP_NTZ AS GRAPH_HISTORY_VALID_FROM,
                    
                    -- ROW_NUMBER to pick the "best" version for a logical refresh event if DTRH returns multiple equivalent rows
                    ROW_NUMBER() OVER (
                        PARTITION BY 
                            dtrh.QUALIFIED_NAME, 
                            dtrh.DATA_TIMESTAMP, 
                            NVL(dtrh.REFRESH_START_TIME, '1970-01-01'::TIMESTAMP_NTZ), -- Use NTZ constant
                            NVL(dtrh.QUERY_ID, 'N/A')
                        ORDER BY 
                            CASE dtrh.STATE
                                WHEN 'SUCCEEDED' THEN 1 -- Most definitive state
                                WHEN 'FAILED' THEN 2
                                WHEN 'UPSTREAM_FAILED' THEN 3
                                WHEN 'CANCELLED' THEN 4
                                WHEN 'EXECUTING' THEN 5
                                WHEN 'SCHEDULED' THEN 6
                                ELSE 99
                            END ASC,
                            dtrh.REFRESH_END_TIME DESC NULLS LAST, -- Prefer most recent end time for completed/executing
                            dtrh.DATA_TIMESTAMP DESC -- Fallback for data timestamp (if multiple equal start/end)
                    ) as rn
                FROM
                    TABLE(INFORMATION_SCHEMA.DYNAMIC_TABLE_REFRESH_HISTORY(' || lv_func_args || ')) dtrh
                WHERE dtrh.QUALIFIED_NAME = ''' || :lv_qualified_name_to_filter || '''
            ) AS deduplicated_source
            WHERE rn = 1
        ) AS source_data
        -- Use NVL in ON clause to match NULLs for primary key components
        -- QUALIFIED_NAME, DATA_TIMESTAMP, REFRESH_START_TIME, QUERY_ID from table
        ON target_table.QUALIFIED_NAME = source_data.QUALIFIED_NAME
        AND target_table.DATA_TIMESTAMP = source_data.DATA_TIMESTAMP
        AND NVL(target_table.REFRESH_START_TIME, '1970-01-01'::TIMESTAMP_NTZ) = NVL(source_data.REFRESH_START_TIME, '1970-01-01'::TIMESTAMP_NTZ)
        AND NVL(target_table.QUERY_ID, 'N/A') = NVL(source_data.QUERY_ID, 'N/A')

        WHEN MATCHED AND target_table.STATE != source_data.STATE THEN
            UPDATE SET
                target_table.COLLECTION_TIMESTAMP = source_data.COLLECTION_TIMESTAMP_SOURCE, -- Update snapshot time when state changes
                target_table.STATE = source_data.STATE,
                target_table.STATE_CODE = source_data.STATE_CODE,
                target_table.STATE_MESSAGE = source_data.STATE_MESSAGE,
                target_table.REFRESH_END_TIME = source_data.REFRESH_END_TIME,
                target_table.NUMINSERTEDROWS = source_data.NUMINSERTEDROWS,
                target_table.NUMDELETEDROWS = source_data.NUMDELETEDROWS,
                target_table.NUMCOPIEDROWS = source_data.NUMCOPIEDROWS,
                target_table.NUMADDEDPARTITIONS = source_data.NUMADDEDPARTITIONS,
                target_table.NUMREMOVEDPARTITIONS = source_data.NUMREMOVEDPARTITIONS,
                target_table.REFRESH_ACTION = source_data.REFRESH_ACTION,
                target_table.REFRESH_TRIGGER = source_data.REFRESH_TRIGGER,
                target_table.TARGET_LAG_SEC = source_data.TARGET_LAG_SEC,
                target_table.GRAPH_HISTORY_VALID_FROM = source_data.GRAPH_HISTORY_VALID_FROM
        WHEN NOT MATCHED THEN
            INSERT (
                COLLECTION_TIMESTAMP,
                DATABASE_NAME, SCHEMA_NAME, TABLE_NAME, QUALIFIED_NAME, STATE, STATE_CODE, STATE_MESSAGE, QUERY_ID,
                DATA_TIMESTAMP, REFRESH_START_TIME, REFRESH_END_TIME, COMPLETION_TARGET,
                LAST_COMPLETED_DEPENDENCY_QUALIFIED_NAME, LAST_COMPLETED_DEPENDENCY_DATA_TIMESTAMP,
                NUMINSERTEDROWS, NUMDELETEDROWS, NUMCOPIEDROWS, NUMADDEDPARTITIONS, NUMREMOVEDPARTITIONS,
                REFRESH_ACTION, REFRESH_TRIGGER, TARGET_LAG_SEC, GRAPH_HISTORY_VALID_FROM
            )
            VALUES (
                source_data.COLLECTION_TIMESTAMP_SOURCE,
                source_data.DATABASE_NAME, source_data.SCHEMA_NAME, source_data.TABLE_NAME, source_data.QUALIFIED_NAME, source_data.STATE, source_data.STATE_CODE, source_data.STATE_MESSAGE, source_data.QUERY_ID,
                source_data.DATA_TIMESTAMP, source_data.REFRESH_START_TIME, source_data.REFRESH_END_TIME, source_data.COMPLETION_TARGET,
                source_data.LAST_COMPLETED_DEPENDENCY_QUALIFIED_NAME, source_data.LAST_COMPLETED_DEPENDENCY_DATA_TIMESTAMP,
                source_data.NUMINSERTEDROWS, source_data.NUMDELETEDROWS, source_data.NUMCOPIEDROWS, source_data.NUMADDEDPARTITIONS, source_data.NUMREMOVEDPARTITIONS,
                source_data.REFRESH_ACTION, source_data.REFRESH_TRIGGER, source_data.TARGET_LAG_SEC, source_data.GRAPH_HISTORY_VALID_FROM
            );
    ';

    SELECT
        "number of rows inserted" || ' inserted, ' ||
        "number of rows updated" || ' updated.'
    INTO lv_merge_action_desc
    FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));

    RETURN 'Successfully merged ' || lv_merge_action_desc || ' into T_DYNAMIC_TABLE_REFRESH_HISTORY_FLAT for ' || :lv_qualified_name_to_filter || '.';

EXCEPTION
    WHEN OTHER THEN
        lv_error_message := 'Error during DTRH collection for ' || :lv_qualified_name_to_filter || ' in range ' || :lv_start_timestamp || ' to ' || :lv_end_timestamp || '. SQLSTATE: ' || SQLSTATE() || ', SQLCODE: ' || SQLCODE() || ', Message: ' || SQLERRM();
        RETURN lv_error_message;
END;
$$;
