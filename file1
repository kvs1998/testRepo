# In your app.py (inside the tab1 section, likely a new dedicated section)
import streamlit as st
import pandas as pd
import plotly.express as px
import snowflake_data # Assuming your module name

# ... (Previous setup for tab1, history_df fetching)

with tab1:
    # ... (previous content for colA, colB, and other full-width sections)

    st.divider()
    st.header("Cumulative State Counts per Table")
    st.write("This chart shows the historical count of each state for individual tables.")

    if not history_df.empty:
        # Group by TABLE_NAME and STATE, then count occurrences
        table_state_counts = history_df.groupby(['TABLE_NAME', 'STATE']).size().reset_index(name='COUNT')

        # Pivot the table to have states as columns for stacking
        # Fill NaN with 0 for states that a table might not have
        pivot_df = table_state_counts.pivot_table(index='TABLE_NAME',
                                                columns='STATE',
                                                values='COUNT').fillna(0).reset_index()

        # Ensure all states are present as columns, even if all tables don't have them
        all_possible_states = ["SCHEDULED", "EXECUTING", "SUCCEEDED", "FAILED", "CANCELLED", "UPSTREAM_FAILED"]
        for state in all_possible_states:
            if state not in pivot_df.columns:
                pivot_df[state] = 0

        # Define the order for stacking (e.g., problematic states first)
        stack_order = ["FAILED", "UPSTREAM_FAILED", "CANCELLED", "EXECUTING", "SCHEDULED", "SUCCEEDED"]

        # Sort the tables for better presentation (e.g., by total fails or total refreshes)
        pivot_df['TOTAL_REFRESHES'] = pivot_df[all_possible_states].sum(axis=1)
        pivot_df = pivot_df.sort_values(by=['FAILED', 'TOTAL_REFRESHES'], ascending=[False, False])

        # Filter for top N tables if there are hundreds to avoid an unreadable chart
        num_top_tables = st.slider(
            "Show Top N Tables by Total Refreshes (for State History)",
            min_value=5,
            max_value=min(50, len(pivot_df)), # Max 50 or total tables, whichever is smaller
            value=min(20, len(pivot_df)),     # Default to 20 or less
            key="state_history_table_slider"
        )
        display_pivot_df = pivot_df.head(num_top_tables)


        fig_table_states = px.bar(display_pivot_df,
                                  x=stack_order, # Pass the list of state columns for stacking
                                  y='TABLE_NAME',
                                  orientation='h',
                                  title=f'Historical State Counts for Top {num_top_tables} Tables',
                                  labels={
                                      'value': 'Count',
                                      'TABLE_NAME': 'Table Name',
                                      'variable': 'State' # This is Plotly's default for stacked bar categories
                                  },
                                  color_discrete_map={ # Same color mapping as before
                                      "FAILED": "red",
                                      "UPSTREAM_FAILED": "darkred",
                                      "CANCELLED": "orange",
                                      "SCHEDULED": "blue",
                                      "EXECUTING": "purple",
                                      "SUCCEEDED": "green"
                                  })

        fig_table_states.update_layout(barmode='stack', showlegend=True) # Ensure bars are stacked and legend is shown
        fig_table_states.update_yaxes(categoryorder='trace reversed') # Order y-axis as per sorted DataFrame
        st.plotly_chart(fig_table_states, use_container_width=True)

    else:
        st.warning("No data found to display table state history.")
