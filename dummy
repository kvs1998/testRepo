with chart_detail_row1_cols[0]: # Mean Lag Distribution (Histogram) - CORRECTED
        st.markdown("<p style='font-size:16px;'><b>Mean Lag Distribution</b></p>", unsafe_allow_html=True)
        st.write("Distribution of dynamic tables by their mean lag time.")

        # --- DATA PREPARATION FOR MEAN LAG HISTOGRAM ---
        # Get mean lag data in seconds
        mean_lag_data_seconds = filtered_metadata_df['MEAN_LAG_SEC'].dropna().copy()

        if not mean_lag_data_seconds.empty:
            # --- TRANSFORM X-AXIS DATA TO SELECTED DISPLAY UNIT FOR PLOTTING ---
            if time_format_option == "minutes":
                unit_divisor_mean_lag = 60
            elif time_format_option == "hours":
                unit_divisor_mean_lag = 3600
            elif time_format_option == "days":
                unit_divisor_mean_lag = 86400
            else: # "seconds" or "mixed"
                unit_divisor_mean_lag = 1
            
            mean_lag_values_to_plot = mean_lag_data_seconds / unit_divisor_mean_lag

            # --- DEFINE CUSTOM BINS AND LABELS USING pd.cut ---
            if not mean_lag_values_to_plot.empty:
                min_val = mean_lag_values_to_plot.min()
                max_val = mean_lag_values_to_plot.max()

                # Handle single value or extremely small range
                if max_val == min_val:
                    binsize_plot_unit_mean_lag = max(1.0, max_val / 5) # If a single value, try to give it some width
                    if binsize_plot_unit_mean_lag == 0: binsize_plot_unit_mean_lag = 1.0
                elif max_val - min_val < 1e-6 and max_val > 0: # Very small non-zero range
                    binsize_plot_unit_mean_lag = (max_val - min_val) / 2 # Simple half range
                    if binsize_plot_unit_mean_lag == 0: binsize_plot_unit_mean_lag = 1.0 # Avoid zero bin size
                else: # Normal range
                    num_desired_bins = 20
                    binsize_plot_unit_mean_lag = (max_val - min_val) / num_desired_bins
                    
                    if time_format_option == 'minutes':
                        binsize_plot_unit_mean_lag = max(0.1, binsize_plot_unit_mean_lag)
                    elif time_format_option == 'hours':
                        binsize_plot_unit_mean_lag = max(0.01, binsize_plot_unit_mean_lag)
                    elif time_format_option == 'days':
                        binsize_plot_unit_mean_lag = max(0.001, binsize_plot_unit_mean_lag)
                    else: # seconds or mixed
                        binsize_plot_unit_mean_lag = max(1.0, binsize_plot_unit_mean_lag)
                    
                    if binsize_plot_unit_mean_lag >= 1: # Round if 1 or greater
                        binsize_plot_unit_mean_lag = round(binsize_plot_unit_mean_lag)
                    elif binsize_plot_unit_mean_lag >= 0.1: # Round to 1 decimal
                        binsize_plot_unit_mean_lag = round(binsize_plot_unit_mean_lag, 1)
                    elif binsize_plot_unit_mean_lag >= 0.01: # Round to 2 decimals
                        binsize_plot_unit_mean_lag = round(binsize_plot_unit_mean_lag, 2)
                    elif binsize_plot_unit_mean_lag >= 0.001: # Round to 3 decimals
                        binsize_plot_unit_mean_lag = round(binsize_plot_unit_mean_lag, 3)

                # Create bin edges starting from 0
                bins = np.arange(0, max_val + binsize_plot_unit_mean_lag, binsize_plot_unit_mean_lag)
                
                # Assign data to bins and get counts
                binned_data_series = pd.cut(
                    mean_lag_values_to_plot,
                    bins=bins,
                    right=False, # [start, end)
                    include_lowest=True # Include 0 in the first bin
                ).astype(str) # Convert to string for Plotly sorting

                # Filter out 'NaN' bins that might appear if data falls outside explicit bins
                binned_counts_df = binned_data_series.value_counts().reset_index()
                binned_counts_df.columns = ['Bin_Range', 'Count']
                
                # Sort bins properly for visualization
                binned_counts_df['Bin_Start_Sort'] = binned_counts_df['Bin_Range'].apply(lambda x: float(x.split(',')[0].replace('[', '')) if pd.notna(x) and '[' in x else -np.inf)
                binned_counts_df = binned_counts_df.sort_values('Bin_Start_Sort').drop(columns='Bin_Start_Sort').reset_index(drop=True)

                # --- CREATE PLOTLY EXPRESS BAR CHART (acting as a histogram) ---
                fig_lag_hist = px.bar(
                    binned_counts_df,
                    x='Bin_Range',
                    y='Count',
                    labels={
                        'Bin_Range': f'Mean Lag ({time_format_option})',
                        'Count': 'Number of DTs'
                    },
                    text='Count' # Display count on top of bars
                )
                fig_lag_hist.update_layout(bargap=0.1)

                # --- X-axis formatting for histogram ---
                fig_lag_hist.update_xaxes(
                    categoryorder='array', # Ensure custom order
                    categoryarray=binned_counts_df['Bin_Range'].tolist(),
                    tickangle=0 # Force horizontal labels
                )
                fig_lag_hist.update_traces(textposition='outside') # Text on top of bars
                            
                st.plotly_chart(fig_lag_hist, use_container_width=True)
            else: # mean_lag_values_to_plot is empty
                st.info("No mean lag data to display for histogram after unit conversion.", icon="ℹ️")
        else:
            st.info("No mean lag data to display for selected filters.", icon="ℹ️")
