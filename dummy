with chart_cols_pair3[0]:  # Refresh Duration Distribution (Histogram)
        cols_chart_header = st.columns(
            [0.8, 0.2]
        )  # Internal columns for title and checkbox
        with cols_chart_header[0]:
            st.markdown(
                "<p style='font-size:16px;'><b>Refresh Duration Distribution</b></p>",
                unsafe_allow_html=True,
            )
        with cols_chart_header[1]:
            use_log_scale_duration_hist = st.checkbox(
                "Log Scale X-axis", key="log_scale_duration_hist_dt_state"
            )
        st.write("Distribution of refresh durations.")

        if (
            "REFRESH_DURATION_SEC" in filtered_history_df.columns
            and not filtered_history_df["REFRESH_DURATION_SEC"].empty
        ):
            duration_data = (
                filtered_history_df["REFRESH_DURATION_SEC"].dropna().copy()
            )

            # --- START: REAL FINAL FIX ---
            plot_data_for_hist = duration_data
            histogram_kwargs = {} # Use this to pass log_x and other direct px args

            if use_log_scale_duration_hist:
                # Filter out non-positive values for log scale *before* plotting
                plot_data_for_hist = duration_data[duration_data > 0]
                if not plot_data_for_hist.empty:
                    histogram_kwargs["log_x"] = True # Tell px.histogram to use log scale directly
                    st.info(
                        "Logarithmic scale applied to X-axis. Zero durations are excluded.",
                        icon="ℹ️",
                    )
                else:
                    # If all data becomes zero/negative after filtering, inform user and return
                    st.info("No positive refresh duration data available for log scale histogram.", icon="ℹ️")
                    return # Exit the function for this chart if no data for log scale

            if not plot_data_for_hist.empty: # Check if data is available after potential log scale filtering
                fig_duration_hist = px.histogram(
                    plot_data_for_hist,
                    x="REFRESH_DURATION_SEC",
                    nbins=20,
                    labels={
                        "REFRESH_DURATION_SEC": f"Duration ({time_format_option})"
                    },
                    text_auto=False,
                    **histogram_kwargs # Apply log_x=True if set
                )
                fig_duration_hist.update_layout(bargap=0.1, title_text="")

                # ONLY apply custom ticks if NOT using log scale AND format is not "seconds"
                if not use_log_scale_duration_hist and time_format_option != "seconds":
                    min_x_val = plot_data_for_hist.min()
                    max_x_val = plot_data_for_hist.max()
                    if max_x_val > 0: # Ensure there's a range to calculate ticks for
                        tick_values = np.linspace(min_x_val, max_x_val, num=5, endpoint=True)
                        tick_texts = format_seconds_to_readable(
                            pd.Series(tick_values), time_format_option
                        ).tolist()
                        fig_duration_hist.update_xaxes(
                            tickvals=tick_values, ticktext=tick_texts
                        )
                
                st.plotly_chart(fig_duration_hist, use_container_width=True)
            else: # This handles cases where plot_data_for_hist became empty (e.g. all 0s, or filters removed everything)
                st.info(
                    "No valid refresh duration data to display for histogram after filters.",
                    icon="ℹ️",
                )
            # --- END: REAL FINAL FIX ---
        else:
            st.info("No REFRESH_DURATION_SEC data available.", icon="ℹ️")
