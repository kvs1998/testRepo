with chart_cols_pair3[0]:  # Refresh Duration Distribution (Histogram)
        cols_chart_header = st.columns(
            [0.8, 0.2]
        )  # Internal columns for title and checkbox
        with cols_chart_header[0]:
            st.markdown(
                "<p style='font-size:16px;'><b>Refresh Duration Distribution</b></p>",
                unsafe_allow_html=True,
            )
        with cols_chart_header[1]:
            use_log_scale_duration_hist = st.checkbox(
                "Log Scale X-axis", key="log_scale_duration_hist_dt_state"
            )
        st.write("Distribution of refresh durations.")

        if (
            "REFRESH_DURATION_SEC" in filtered_history_df.columns
            and not filtered_history_df["REFRESH_DURATION_SEC"].empty
        ):
            duration_data = (
                filtered_history_df["REFRESH_DURATION_SEC"].dropna().copy()
            )

            # --- START: FINAL, SIMPLIFIED, AND CORRECT FIX ---
            plot_data = duration_data
            hist_args = {}
            is_data_available = True

            if use_log_scale_duration_hist:
                # For log scale, filter data first
                plot_data = duration_data[duration_data > 0]
                if plot_data.empty:
                    is_data_available = False
                else:
                    # Pass the log_x parameter directly to the plotting function
                    hist_args["log_x"] = True
                    st.info(
                        "Logarithmic scale applied to X-axis. Zero durations are excluded.",
                        icon="ℹ️",
                    )

            if is_data_available and not plot_data.empty:
                fig_duration_hist = px.histogram(
                    plot_data,
                    x="REFRESH_DURATION_SEC",
                    nbins=20,
                    labels={
                        "REFRESH_DURATION_SEC": f"Duration ({time_format_option})"
                    },
                    text_auto=False,
                    **hist_args,  # Apply log_x=True here if needed
                )
                fig_duration_hist.update_layout(bargap=0.1, title_text="")

                # Only apply custom ticks if NOT using log scale and format is not seconds
                if (
                    not use_log_scale_duration_hist
                    and time_format_option != "seconds"
                ):
                    min_x_val = plot_data.min()
                    max_x_val = plot_data.max()
                    if max_x_val > 0:
                        tick_values = np.linspace(
                            min_x_val, max_x_val, num=5, endpoint=True
                        )
                        tick_texts = format_seconds_to_readable(
                            pd.Series(tick_values), time_format_option
                        ).tolist()
                        fig_duration_hist.update_xaxes(
                            tickvals=tick_values, ticktext=tick_texts
                        )

                st.plotly_chart(fig_duration_hist, use_container_width=True)
            else:
                st.info(
                    "No positive refresh duration data to display for histogram.",
                    icon="ℹ️",
                )
            # --- END: FINAL, SIMPLIFIED, AND CORRECT FIX ---
        else:
            st.info("No REFRESH_DURATION_SEC data available.", icon="ℹ️")
