# Initialize session state for last fetched timestamps
if 'history_last_fetched_timestamp' not in st.session_state:
    st.session_state.history_last_fetched_timestamp = pd.Timestamp.now()
if 'metadata_last_fetched_timestamp' not in st.session_state:
    st.session_state.metadata_last_fetched_timestamp = pd.Timestamp.now()

st.set_page_config(layout="wide", page_title="Dynamic Table Dashboard", icon="üìä")
st.title("Dynamic Table Refresh Status Dashboard")

# --- Global Data Loading with Manual Cache Hit Detection ---
spinner_placeholder = st.empty() # Placeholder for the combined spinner

# Custom function to call cached functions and detect if a real fetch occurred
def load_data_with_indicator(fetch_func, data_identifier):
    start_time = time.time()
    
    # Show combined spinner
    with spinner_placeholder.spinner(f"Fetching {data_identifier} data..."):
        df = fetch_func() # This is the call to the @st.cache_data function
    
    end_time = time.time()
    
    # Determine if it was a cache miss (i.e., took more than minimal time)
    # This threshold (e.g., 0.1 seconds) needs to be tuned.
    # If a fetch from cache is super fast (e.g., < 0.01s), it's likely a cache hit.
    # If it takes longer (e.g., > 0.1s), it's likely a cache miss (new fetch).
    fetch_duration = end_time - start_time
    
    is_fresh_fetch = (fetch_duration > 0.1) # Tune this threshold!
    
    if is_fresh_fetch:
        st.session_state[f'{data_identifier}_last_fetched_timestamp'] = pd.Timestamp.now()
        st.toast(f"{data_identifier.replace('_', ' ').capitalize()} data updated!", icon="‚úÖ")
    
    return df

try:
    history_df = load_data_with_indicator(snowflake_data.fetch_dt_refresh_history_data_cached, 'refresh_history')
    metadata_df = load_data_with_indicator(snowflake_data.fetch_dt_metadata_latest_snapshot_data_cached, 'metadata_snapshot')
    
    spinner_placeholder.empty() # Ensure spinner is cleared after both loads

except Exception as e:
    st.error(f"Failed to load data: {e}. Please ensure your Snowflake connection and data tables are correctly set up.", icon="‚ùó")
    history_df = pd.DataFrame()
    metadata_df = pd.DataFrame()


# Initial check for critical data availability
if history_df.empty and metadata_df.empty:
    st.error("Dashboard cannot render without any data. Please resolve data loading issues.", icon="‚ùó")
    st.stop()
elif history_df.empty:
    st.warning("Historical refresh data is missing. Some tabs may not display correctly.", icon="‚ö†Ô∏è")
elif metadata_df.empty:
    st.warning("Dynamic table metadata is missing. The 'DT HEALTH' tab will not display correctly.", icon="‚ö†Ô∏è")

# --- Display Data Freshness Indicators at the top ---
freshness_cols = st.columns([1,1])
with freshness_cols[0]:
    if 'history_last_fetched_timestamp' in st.session_state:
        st.markdown(
            f"<p style='font-size:12px; margin-bottom:0;'>Refresh History Data Last Fetched: <b>{st.session_state.history_last_fetched_timestamp.strftime('%Y-%m-%d %H:%M:%S')}</b></p>", 
            unsafe_allow_html=True
        )
with freshness_cols[1]:
    if 'metadata_last_fetched_timestamp' in st.session_state:
        st.markdown(
            f"<p style='font-size:12px; margin-bottom:0;'>Metadata Snapshot Data Last Fetched: <b>{st.session_state.metadata_last_fetched_timestamp.strftime('%Y-%m-%d %H:%M:%S')}</b></p>", 
            unsafe_allow_html=True
        )

st.divider()
