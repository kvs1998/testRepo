import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# Sample data (based on the image provided)
data = {
    "TABLE_ID": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    "EXEC1_TARGET_LAG": [7200, 120, 120, 120, 120, 300, 7200, 7200, 7200, 7200],
    "EXEC1_MEAN_LAG": [15197, 1308, 1179, 76, 73, 101, 15197, 3886, 3159, 3105],
    "EXEC2_TARGET_LAG": [7200, 120, 120, 120, 120, 300, 7200, 7200, 7200, 7200],
    "EXEC2_MEAN_LAG": [15197, 1308, 1180, 76, 73, 101, 15197, 4048, 3142, 3085],
    "EXEC3_TARGET_LAG": [7200, 120, 120, 120, 120, 300, 7200, 7200, 7200, 7200],
    "EXEC3_MEAN_LAG": [12659, 1294, 1176, 81, 74, 101, 12659, 4048, 3142, 3085],
}

df = pd.DataFrame(data)

# Set color scheme
colors = ['blue', 'green', 'orange']

# Plot lines for EXEC1, EXEC2, EXEC3
plt.figure(figsize=(12, 6))
for i, exec_num in enumerate(["EXEC1", "EXEC2", "EXEC3"]):
    plt.plot(df["TABLE_ID"], df[f"{exec_num}_MEAN_LAG"], 
             color=colors[i], linestyle='-', label=f"{exec_num} MEAN LAG")
    plt.plot(df["TABLE_ID"], df[f"{exec_num}_TARGET_LAG"], 
             color=colors[i], linestyle='--', alpha=0.6, label=f"{exec_num} TARGET LAG")

    # Mark target lags with square markers
    plt.scatter(df["TABLE_ID"], df[f"{exec_num}_TARGET_LAG"], color=colors[i], marker='s', alpha=0.6)

# Highlight zero mean lag values with red 'X'
zero_mean_mask = (df["EXEC1_MEAN_LAG"] == 0) & (df["EXEC2_MEAN_LAG"] == 0) & (df["EXEC3_MEAN_LAG"] == 0)
plt.scatter(df.loc[zero_mean_mask, "TABLE_ID"], df.loc[zero_mean_mask, "EXEC1_MEAN_LAG"],
            color='red', marker='x', s=100, label="Zero Mean Lag")

plt.xlabel("TABLE_ID")
plt.ylabel("Lag Values")
plt.title("Mean Lag and Target Lag per Execution")
plt.legend()
plt.grid(True, linestyle='--', alpha=0.5)
plt.show()


# Identify rows where all EXEC Mean Lags are zero
zero_mean_mask = (df[["EXEC1_MEAN_LAG", "EXEC2_MEAN_LAG", "EXEC3_MEAN_LAG"]] == 0).all(axis=1)



 from snowflake.snowpark import Session
 from snowflake.snowpark.functions import col, to_date
 

 def main(session: Session):
  # Construct the query against the DYNAMIC_TABLE_REFRESH_HISTORY view.
  # You can add filters (e.g., date range, specific table) as needed.
  # Limiting results is highly recommended.
  refresh_history_df = session.table("SNOWFLAKE.ACCOUNT_USAGE.DYNAMIC_TABLE_REFRESH_HISTORY") \
  .filter(col("REFRESH_START_TIME") >= to_date("2024-01-01")) \
  .limit(1000) # Always limit results from ACCOUNT_USAGE
 

  # Select the columns you want to analyze.
  selected_df = refresh_history_df.select(
  "DYNAMIC_TABLE_NAME",
  "REFRESH_START_TIME",
  "REFRESH_END_TIME",
  "REFRESH_STATE",
  "ELAPSED_DURATION",
  "ROWS_PRODUCED",
  "BYTES_SPILLED_TO_LOCAL",
  "BYTES_SPILLED_TO_REMOTE",
  "ERROR_MESSAGE" #Include error message if there were failures.
  )
 

  selected_df.show()
  #return selected_df.to_pandas() # for easier viewing
