import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# Sample data (based on the image provided)
data = {
    "TABLE_ID": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    "EXEC1_TARGET_LAG": [7200, 120, 120, 120, 120, 300, 7200, 7200, 7200, 7200],
    "EXEC1_MEAN_LAG": [15197, 1308, 1179, 76, 73, 101, 15197, 3886, 3159, 3105],
    "EXEC2_TARGET_LAG": [7200, 120, 120, 120, 120, 300, 7200, 7200, 7200, 7200],
    "EXEC2_MEAN_LAG": [15197, 1308, 1180, 76, 73, 101, 15197, 4048, 3142, 3085],
    "EXEC3_TARGET_LAG": [7200, 120, 120, 120, 120, 300, 7200, 7200, 7200, 7200],
    "EXEC3_MEAN_LAG": [12659, 1294, 1176, 81, 74, 101, 12659, 4048, 3142, 3085],
}

df = pd.DataFrame(data)

# Set color scheme
colors = ['blue', 'green', 'orange']

# Plot lines for EXEC1, EXEC2, EXEC3
plt.figure(figsize=(12, 6))
for i, exec_num in enumerate(["EXEC1", "EXEC2", "EXEC3"]):
    plt.plot(df["TABLE_ID"], df[f"{exec_num}_MEAN_LAG"], 
             color=colors[i], linestyle='-', label=f"{exec_num} MEAN LAG")
    plt.plot(df["TABLE_ID"], df[f"{exec_num}_TARGET_LAG"], 
             color=colors[i], linestyle='--', alpha=0.6, label=f"{exec_num} TARGET LAG")

    # Mark target lags with square markers
    plt.scatter(df["TABLE_ID"], df[f"{exec_num}_TARGET_LAG"], color=colors[i], marker='s', alpha=0.6)

# Highlight zero mean lag values with red 'X'
zero_mean_mask = (df["EXEC1_MEAN_LAG"] == 0) & (df["EXEC2_MEAN_LAG"] == 0) & (df["EXEC3_MEAN_LAG"] == 0)
plt.scatter(df.loc[zero_mean_mask, "TABLE_ID"], df.loc[zero_mean_mask, "EXEC1_MEAN_LAG"],
            color='red', marker='x', s=100, label="Zero Mean Lag")

plt.xlabel("TABLE_ID")
plt.ylabel("Lag Values")
plt.title("Mean Lag and Target Lag per Execution")
plt.legend()
plt.grid(True, linestyle='--', alpha=0.5)
plt.show()




<!DOCTYPE html>
<html>
<head>
    <style>
        body {
            font-family: Arial, sans-serif;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: left;
            height: 40px;
        }

        th {
            background-color: #0073e6;
            color: white;
        }

        select {
            width: 100%;
            padding: 5px;
            font-size: 14px;
        }

        /* Highlighting filtered rows */
        tr.filtered {
            display: none;
        }
    </style>
</head>
<body>

    <h2>Table Status Report</h2>

    <table id="dataTable">
        <thead>
            <tr>
                <th>#</th>
                <th>
                    <select id="tableIdFilter" onchange="filterTable()">
                        <option value="">All</option>
                        {% for table in tables | unique(attribute='table_id') %}
                        <option value="{{ table.table_id }}">{{ table.table_id }}</option>
                        {% endfor %}
                    </select>
                </th>
                <th>
                    <select id="databaseFilter" onchange="filterTable()">
                        <option value="">All</option>
                        {% for table in tables | unique(attribute='database_name') %}
                        <option value="{{ table.database_name }}">{{ table.database_name }}</option>
                        {% endfor %}
                    </select>
                </th>
                <th>
                    <select id="schemaFilter" onchange="filterTable()">
                        <option value="">All</option>
                        {% for table in tables | unique(attribute='schema_name') %}
                        <option value="{{ table.schema_name }}">{{ table.schema_name }}</option>
                        {% endfor %}
                    </select>
                </th>
                <th>
                    <select id="tableNameFilter" onchange="filterTable()">
                        <option value="">All</option>
                        {% for table in tables | unique(attribute='table_name') %}
                        <option value="{{ table.table_name }}">{{ table.table_name }}</option>
                        {% endfor %}
                    </select>
                </th>
                <th>
                    <select id="stateFilter" onchange="filterTable()">
                        <option value="">All</option>
                        {% for table in tables | unique(attribute='state') %}
                        <option value="{{ table.state }}">{{ table.state }}</option>
                        {% endfor %}
                    </select>
                </th>
                <th>
                    <select id="targetLagFilter" onchange="filterTable()">
                        <option value="">All</option>
                        {% for table in tables | unique(attribute='target_lag') %}
                        <option value="{{ table.target_lag }}">{{ table.target_lag }}</option>
                        {% endfor %}
                    </select>
                </th>
                <th>Mean Lag (sec)</th>
                <th>Max Lag (sec)</th>
                <th>Within Target Ratio</th>
                <th>
                    <select id="refreshStateFilter" onchange="filterTable()">
                        <option value="">All</option>
                        {% for table in tables | unique(attribute='last_refresh_state') %}
                        <option value="{{ table.last_refresh_state }}">{{ table.last_refresh_state }}</option>
                        {% endfor %}
                    </select>
                </th>
            </tr>
        </thead>
        <tbody>
            {% for table in tables %}
            <tr>
                <td>{{ loop.index }}</td>
                <td class="tableId">{{ table.table_id }}</td>
                <td class="database">{{ table.database_name }}</td>
                <td class="schema">{{ table.schema_name }}</td>
                <td class="tableName">{{ table.table_name }}</td>
                <td class="state">{{ table.state }}</td>
                <td class="targetLag">{{ table.target_lag }}</td>
                <td>{{ table.mean_lag }}</td>
                <td>{{ table.max_lag }}</td>
                <td style="background-color: 
                    {% if table.within_target_ratio < 0.5 %} orange 
                    {% elif table.within_target_ratio < 0.95 %} lightgreen 
                    {% else %} green 
                    {% endif %}">
                    {{ table.within_target_ratio }}
                </td>
                <td class="refreshState">{{ table.last_refresh_state }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <script>
        function filterTable() {
            let table = document.getElementById("dataTable");
            let rows = table.getElementsByTagName("tr");
            
            let tableIdFilter = document.getElementById("tableIdFilter").value.toLowerCase();
            let databaseFilter = document.getElementById("databaseFilter").value.toLowerCase();
            let schemaFilter = document.getElementById("schemaFilter").value.toLowerCase();
            let tableNameFilter = document.getElementById("tableNameFilter").value.toLowerCase();
            let stateFilter = document.getElementById("stateFilter").value.toLowerCase();
            let targetLagFilter = document.getElementById("targetLagFilter").value.toLowerCase();
            let refreshStateFilter = document.getElementById("refreshStateFilter").value.toLowerCase();

            for (let i = 1; i < rows.length; i++) {
                let row = rows[i];
                let tableId = row.getElementsByClassName("tableId")[0].textContent.toLowerCase();
                let database = row.getElementsByClassName("database")[0].textContent.toLowerCase();
                let schema = row.getElementsByClassName("schema")[0].textContent.toLowerCase();
                let tableName = row.getElementsByClassName("tableName")[0].textContent.toLowerCase();
                let state = row.getElementsByClassName("state")[0].textContent.toLowerCase();
                let targetLag = row.getElementsByClassName("targetLag")[0].textContent.toLowerCase();
                let refreshState = row.getElementsByClassName("refreshState")[0].textContent.toLowerCase();

                let showRow = 
                    (tableIdFilter === "" || tableId.includes(tableIdFilter)) &&
                    (databaseFilter === "" || database.includes(databaseFilter)) &&
                    (schemaFilter === "" || schema.includes(schemaFilter)) &&
                    (tableNameFilter === "" || tableName.includes(tableNameFilter)) &&
                    (stateFilter === "" || state.includes(stateFilter)) &&
                    (targetLagFilter === "" || targetLag.includes(targetLagFilter)) &&
                    (refreshStateFilter === "" || refreshState.includes(refreshStateFilter));

                row.style.display = showRow ? "" : "none";
            }
        }
    </script>

</body>
</html>

            {% if row["Within Target Ratio"] < 0.6 %}
                style="background-color: #fde6d6;" /* Light Peach */
            {% elif row["Within Target Ratio"] < 0.9 %}
                style="background-color: #dff0d8;" /* Soft Pastel Green */
            {% else %}
                style="background-color: #e6f7ff;" /* Very Light Blue */
            {% endif %}

